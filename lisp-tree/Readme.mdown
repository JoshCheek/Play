Description
===========

While going through the book Land of Lisp, we got to discussing how well different data structures would work with Lisp. It was questioned whether Lisp can represent trees well, so I decided to try and work with it, using what we'd learned up to that point. There is a Ruby file to generate the tree input, because actually representing the tree in code was incredibly difficult to keep track of. It generates the tree that you see in the tree.lisp file. Then tree.lisp feeds it into the function I wrote, which evaluates it and prints it to the file for the graphviz tools.


Usage
=====

To see how it works:

    $ clisp tree.lisp
    $ open *.png # Mac only

Dependencies
============

[clisp](http://clisp.sourceforge.net/)
[Graphviz](http://www.graphviz.org/)



---------------------------------------

**This code is unmaintained.** 

_If you do something interesting with it, let me know so I can be happy._

---------------------------------------

Copyright (c) 2010 Joshua Cheek

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
