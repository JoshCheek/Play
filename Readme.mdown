About
=====

The code in these folders is intended for me to keep track of snippets of fun ideas I had, or code experiments I wanted to try. I got the idea from [Wesley Beary](http://github.com/geemus) at Ruby Midwest 2010. He called his prototypes, I call mine play, because I think "prototype" implies more seriousness than mine deserve.

Playgrounds
===========

* [activerecord-settings](http://github.com/JoshCheek/Play/tree/master/activerecord-settings/) Settings class for ActiveRecord projects
* [blackboardbot](http://github.com/JoshCheek/Play/tree/master/blackboardbot/) Script to log onto my school website, check all my forums for new posts, notify me of new posts by text message.
* [chem-timer](http://github.com/JoshCheek/Play/tree/master/chem-timer/) Shoes timer app to alert me when to measure results for my chem lab.
* [clf](http://github.com/JoshCheek/Play/tree/master/clf/) Command line formatter (ascii escape sequence lib).
* [craigslist-watcher](http://github.com/JoshCheek/Play/tree/master/craigslist-watcher/) Script to check my local craigslist free page for the given item (in my case, free computers).
* [dynamic-linking](http://github.com/JoshCheek/Play/tree/master/dynamic-linking/) Example of how to do dynamic linking with C
* [fsm](http://github.com/JoshCheek/Play/tree/master/fsm/) Finite state machine in C through macros.
* [html-consolidated](http://github.com/JoshCheek/Play/tree/master/html-consolidated/) Use gcc's preparser to consolidate content into an html page (such as css and javascript libraries) so you can give someone a single html page with no external dependencies.
* [implement-map-in-lisp-in-ruby](http://github.com/JoshCheek/Play/tree/master/implement-map-in-lisp-in-ruby/) Implementing Lisp's map function (technically done in Ruby)
* [irb](http://github.com/JoshCheek/Play/tree/master/irb/) Proof of concept for an interactive Ruby repl like irb.
* [lisp-games](http://github.com/JoshCheek/Play/tree/master/lisp-games/) Some simple command line games created with Lisp, so that I would have some hands-on experience writing my own, since [Land of Lisp][landoflisp] is mostly about reading Barski's Lisp.
* [lisp-tree](http://github.com/JoshCheek/Play/tree/master/lisp-tree/) Create, traverse, and generate images for a tree structure in lisp.
* [land-of-lisp-itinerary](http://github.com/JoshCheek/Play/tree/master/land-of-lisp-itinerary/) Itinerary for going through the book [Land of Lisp][landoflisp].
* [mocking-the-internet](http://github.com/JoshCheek/Play/tree/master/mocking-the-internet/) Test libraries that rely on the internet by mocking the internet, and stubbing out various URLs.
* [physics-lab](http://github.com/JoshCheek/Play/tree/master/physics-lab/) Use the units-system gem to automate all the calculations I would have to do for my Physics lab.
* [project-euler](https://github.com/JoshCheek/Play/tree/master/project_euler) Solutions for [Project Euler](http://projecteuler.net/).
* [quines](http://github.com/JoshCheek/Play/tree/master/quines/) Quines in various languages.
* [ready-for-zero-challenges](http://github.com/JoshCheek/Play/tree/master/ready-for-zero-challenges/) My solutions to [https://www.readyforzero.com/challenge](https://www.readyforzero.com/challenge).
* [ruby-overloadable](http://github.com/JoshCheek/Play/tree/master/ruby-overloadable/) Give Ruby method overloading
* [ruby-golf](http://github.com/JoshCheek/Play/tree/master/ruby-golf/) Solutions for [Ruby Golf](http://rubysource.com/ruby-golf/)
* [ruby-one-liners](http://github.com/JoshCheek/Play/tree/master/ruby-one-liners/) Using Ruby for command line one-liners (where you might normally use sed or awk).
* [ruby-s](http://github.com/JoshCheek/Play/tree/master/ruby-s/) How to use ruby's -s flag for simple command line args.
* [self-referential-hash](http://github.com/JoshCheek/Play/tree/master/self-referential-hash/) Hash where you can declare one key references another.
* [sikulidraw](http://github.com/JoshCheek/Play/tree/master/sikulidraw/) Generate commands for Sikuli such that it draws a picture on the screen, given that the mouse is a 1px pencil.
* [simple-task](http://github.com/JoshCheek/Play/tree/master/simple-task/) Simple command line task manager.
* [sort-efficiency](http://github.com/JoshCheek/Play/tree/master/sort-efficiency/) Look at efficiency of mergesort vs insertionsort to see which is faster when.
* [sort-viewer](http://github.com/JoshCheek/Play/tree/master/sort-viewer/) Render videos of the various sort algorithms ([check out the results](http://vimeo.com/channels/sortalgorithms))

  [landoflisp]: http://landoflisp.com/

To Do
=====

* Eventually, once I'm smart enough, figure out how to turn each project into a git submodule. For now, I'm sure I'll destroy all my work if I even try.

---------------------------------------

**This code is unmaintained.** 

_If you do something interesting with it, let me know so I can be happy._

---------------------------------------

Copyright (c) 2010 Joshua Cheek

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
